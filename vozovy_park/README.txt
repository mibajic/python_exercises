1. Vytvoø si (prozatím) jednoduchý program, který reprezentuje vozový park fiktivního dopravního podniku. 

2. Vytvoø funkci, která spoèítá celkovou kapacitu všech vozù ve vozovém parku. 

3. Uprav program tak, aby vozy ve vozovém parku mìly rùznou kapacitu. 

4. Vytvoø (další) funkci, které lze zadat seznam vozù a požadovanou minimální kapacitu, a ta funkce najde vùz, který má tuto nebo vyšší kapacitu. Napøíklad: školní výlet si potøebuje objednat autobus pro 20 lidí a my chceme nìjaký takový ve vozovém parku najít. Zavolej tuto funkci a vypiš její výsledek (návratovou hodnotu).

5. Zøejmì by bylo fajn vozy nìjak jednoznaènì identifikovat – pøidej jim atribut spz. Uprav program z pøedchozího bodu, aby vypisoval SPZ nalezeného vozu.

6. Každý vùz má jiné náklady za kilometr. Zkus toto v programu nìjak zohlednit – ideálnì aby funkce, která hledá autobus pro ten školní výlet, našla co nejekonomiètìjší variantu.

7. Ve vozovém parku jsou rùzné druhy vozù – na naftu a elektøinu. Autobus na elektøinu bude zøejmì nejlevnìjší varianta, ale asi jím nechceme poslat školu na školní výlet, pokud by vzdálenost byla delší, než dojezd autobusu, protože autobus by se musel po cestì na nìkolik hodin zastavit kvùli nabití. Naopak zastavit s autobusem na naftu kvùli tankování nafty není problém. Zkus to zohlednit v té funkci, která hledá optimální autobus pro školní výlet. (Zøejmì bude potøeba pøidat argument, jak dlouhý ten výlet bude.) 

8. Ve vozovém parku jsou i hybridní vozy. To znamená, že urèitou vzdálenost jedou levnì, dokud se nevybijí baterky, a pak jedou dál na naftu, ale o nìco dráž. Zkus to nìjak zohlednit pøi výbìru optimálního autobusu pro školní výlet. 

9. Zkus program upravit tak, aby v nìm cena paliva (nafty, elektøiny...) nebyla pevnì zabudovaná, ale aby šla zadat pøi bìhu programu.

